"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUriInfo = exports.parseUriInfoQuery = exports.composeUrlPath = exports.getGeneralSettings = exports.getContentNode = exports.parseContentNodeQuery = exports.composeContentNodeOptions = exports.getPosts = void 0;
const client_1 = require("@apollo/client");
const auth_1 = require("../auth");
const utils_1 = require("../utils");
const queries_1 = require("./queries");
const config_1 = require("../config");
async function getPosts(client, options) {
    var _a;
    const result = await client.query({
        query: queries_1.getPostsQuery(options),
        variables: options === null || options === void 0 ? void 0 : options.variables,
    });
    return (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.posts;
}
exports.getPosts = getPosts;
function composeContentNodeOptions(options = {}) {
    let opts = options;
    if (!opts) {
        opts = {};
    }
    opts.variables = Object.assign({ idType: 'URI', asPreview: false }, opts.variables);
    if (opts.variables.idType === 'URI') {
        opts.variables.id = utils_1.trimLeadingSlash(opts.variables.id);
        if (!opts.variables.id) {
            opts.variables.id = '/';
        }
    }
    return opts;
}
exports.composeContentNodeOptions = composeContentNodeOptions;
function parseContentNodeQuery(result, options) {
    var _a, _b, _c;
    const node = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.contentNode;
    if (!node) {
        return undefined;
    }
    const { asPreview } = (_b = options.variables) !== null && _b !== void 0 ? _b : {};
    if (asPreview && !node.isPreview) {
        if (!((_c = node.preview) === null || _c === void 0 ? void 0 : _c.node)) {
            return node;
        }
        return node.preview.node;
    }
    return node;
}
exports.parseContentNodeQuery = parseContentNodeQuery;
async function getContentNode(client, options = {}) {
    const opts = composeContentNodeOptions(options);
    const result = await client.query({
        query: queries_1.getContentNodeQuery(),
        variables: opts.variables,
    });
    return parseContentNodeQuery(result, opts);
}
exports.getContentNode = getContentNode;
async function getGeneralSettings(client) {
    var _a;
    const result = await client.query({
        query: client_1.gql `
      ${queries_1.GENERAL_SETTINGS}
    `,
    });
    return (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.generalSettings;
}
exports.getGeneralSettings = getGeneralSettings;
function composeUrlPath(uriPath) {
    let urlPath = uriPath;
    const { uriPrefix, pagination } = config_1.headlessConfig();
    if (typeof urlPath !== 'string') {
        if (utils_1.isServerSide()) {
            console.warn('Getting uri info requires a URI when server-side.');
            return undefined;
        }
        urlPath = utils_1.resolvePrefixedUrlPath(utils_1.getUrlPath(window.location.href), uriPrefix);
    }
    urlPath = pagination.replace(urlPath);
    urlPath = utils_1.getUrlPath(urlPath);
    const isPreview = utils_1.isPreviewPath(urlPath);
    if (isPreview) {
        urlPath = utils_1.stripPreviewFromUrlPath(urlPath);
    }
    if (isPreview && !utils_1.isServerSide()) {
        const response = auth_1.ensureAuthorization(window.location.href);
        if (typeof response !== 'string' && (response === null || response === void 0 ? void 0 : response.redirect)) {
            setTimeout(() => {
                window.location.replace(response.redirect);
            }, 200);
            return;
        }
    }
    urlPath = utils_1.trimLeadingSlash(urlPath);
    if (!urlPath) {
        urlPath = '/';
    }
    return {
        urlPath,
        isPreview,
    };
}
exports.composeUrlPath = composeUrlPath;
function parseUriInfoQuery(response, uriPath, isPreview) {
    var _a, _b, _c, _d, _e, _f;
    const result = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.nodeByUri;
    if (!result) {
        if (isPreview) {
            return {
                isPreview,
                uriPath,
            };
        }
        return {
            is404: true,
            templates: ['404'],
            uriPath,
        };
    }
    const { id, templates } = result;
    const { isArchive, isSingular } = (_d = (_c = (_b = response === null || response === void 0 ? void 0 : response.data) === null || _b === void 0 ? void 0 : _b.nodeByUri) === null || _c === void 0 ? void 0 : _c.conditionalTags) !== null && _d !== void 0 ? _d : {};
    return {
        isPostsPage: (_e = result.isPostsPage) !== null && _e !== void 0 ? _e : false,
        isFrontPage: (_f = result.isFrontPage) !== null && _f !== void 0 ? _f : false,
        id,
        isPreview,
        uriPath,
        templates,
        isArchive,
        isSingular,
    };
}
exports.parseUriInfoQuery = parseUriInfoQuery;
async function getUriInfo(client, uriPath) {
    var _a;
    const { urlPath, isPreview } = (_a = composeUrlPath(uriPath)) !== null && _a !== void 0 ? _a : {};
    if (!urlPath) {
        return;
    }
    const response = await client.query({
        query: queries_1.GET_URI_INFO,
        variables: {
            uri: urlPath,
        },
    });
    return parseUriInfoQuery(response, urlPath, isPreview);
}
exports.getUriInfo = getUriInfo;
