"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNextStaticProps = exports.getNextServerSideProps = void 0;
const provider_1 = require("../react/provider");
const api_1 = require("../api");
const templateLoader = __importStar(require("./NextTemplateLoader"));
const serverSide_1 = require("./serverSide");
const utils_1 = require("../utils");
function stringifyQueries(queries) {
    var _a, _b, _c, _d, _e;
    if (!queries) {
        return;
    }
    let toStr = {};
    if (queries.post) {
        toStr = Object.assign({ post: {
                variables: (_a = queries.post.variables) !== null && _a !== void 0 ? _a : null,
            } }, toStr);
        if (queries.post.fragments) {
            toStr.post.fragments = {
                postData: (_b = utils_1.stringifyGql(queries.post.fragments.postData)) !== null && _b !== void 0 ? _b : null,
                pageData: (_c = utils_1.stringifyGql(queries.post.fragments.pageData)) !== null && _c !== void 0 ? _c : null,
            };
        }
    }
    if (queries.posts) {
        toStr = Object.assign({ posts: {
                variables: (_d = queries.posts.variables) !== null && _d !== void 0 ? _d : null,
            } }, toStr);
        if (queries.posts.fragments) {
            toStr.posts.fragments = {
                listPostData: (_e = utils_1.stringifyGql(queries.posts.fragments.listPostData)) !== null && _e !== void 0 ? _e : null,
            };
        }
    }
    return toStr;
}
async function getProps(loadTemplates, context, config = {}) {
    var _a;
    const client = api_1.getApolloClient(context);
    if (config.templates) {
        await loadTemplates(context, config.templates);
    }
    await serverSide_1.fetchData(context, config.queries);
    return provider_1.addApolloState(client, {
        props: {
            queries: (_a = stringifyQueries(config.queries)) !== null && _a !== void 0 ? _a : null,
        },
    });
}
async function getNextServerSideProps(context, config = {}) {
    return getProps(async (ctx, templates) => {
        return templateLoader.getServerSideProps(ctx, templates);
    }, context, config);
}
exports.getNextServerSideProps = getNextServerSideProps;
async function getNextStaticProps(context, config = {}) {
    var _a;
    const pageProps = await getProps(async (ctx, templates) => {
        return templateLoader.getStaticProps(ctx, templates);
    }, context, config);
    if ((_a = pageProps) === null || _a === void 0 ? void 0 : _a.props) {
        pageProps.revalidate = 1;
    }
    return pageProps;
}
exports.getNextStaticProps = getNextStaticProps;
