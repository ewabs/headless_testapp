"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pagination = exports.PreviousPageNavigation = exports.NextPageNavigation = void 0;
const react_1 = __importDefault(require("react"));
const config_1 = require("../../config");
function NextPageNavigation({ baseUrl, cursor, ariaLabel, label, }) {
    const { pagination } = config_1.headlessConfig();
    const href = `${baseUrl}/${pagination.after.replace('%cursor%', cursor)}`;
    return (react_1.default.createElement("a", { href: href, "aria-label": ariaLabel }, label));
}
exports.NextPageNavigation = NextPageNavigation;
function PreviousPageNavigation({ baseUrl, cursor, ariaLabel, label, }) {
    const { pagination } = config_1.headlessConfig();
    const href = `${baseUrl}/${pagination.before.replace('%cursor%', cursor)}`;
    return (react_1.default.createElement("a", { href: href, "aria-label": ariaLabel }, label));
}
exports.PreviousPageNavigation = PreviousPageNavigation;
function Pagination({ nextLabel = 'Next Page →', nextAriaLabel = 'Next page.', previousLabel = '← Previous Page', previousAriaLabel = 'Previous page.', ariaLabel = 'Pagination', pageInfo, baseURL, NextPage, PreviousPage, }) {
    var _a, _b;
    if (!pageInfo.hasNextPage && !pageInfo.hasPreviousPage) {
        return null;
    }
    let classes = 'pagination';
    if (pageInfo.hasNextPage)
        classes += ' has-next';
    if (pageInfo.hasPreviousPage)
        classes += ' has-previous';
    const Next = NextPage !== null && NextPage !== void 0 ? NextPage : NextPageNavigation;
    const Previous = PreviousPage !== null && PreviousPage !== void 0 ? PreviousPage : PreviousPageNavigation;
    return (react_1.default.createElement("nav", { className: classes, "aria-label": ariaLabel },
        react_1.default.createElement("div", { className: "wrap" },
            react_1.default.createElement("ul", null,
                pageInfo.hasPreviousPage && (react_1.default.createElement("li", { className: "pagination-previous" },
                    react_1.default.createElement(Previous, { baseUrl: baseURL, cursor: (_a = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.startCursor) !== null && _a !== void 0 ? _a : '', ariaLabel: previousAriaLabel, label: previousLabel }))),
                pageInfo.hasNextPage && (react_1.default.createElement("li", { className: "pagination-next" },
                    react_1.default.createElement(Next, { baseUrl: baseURL, cursor: (_b = pageInfo === null || pageInfo === void 0 ? void 0 : pageInfo.endCursor) !== null && _b !== void 0 ? _b : '', ariaLabel: nextAriaLabel, label: nextLabel })))))));
}
exports.Pagination = Pagination;
