"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePost = exports.useUriInfo = exports.useGeneralSettings = exports.usePosts = void 0;
const client_1 = require("@apollo/client");
const react_1 = require("react");
const queries_1 = require("../api/queries");
const provider_1 = require("./provider");
const api_1 = require("../api");
function usePosts(options) {
    var _a, _b;
    const context = react_1.useContext(provider_1.HeadlessContext);
    const opts = options !== null && options !== void 0 ? options : {};
    if ((_a = context === null || context === void 0 ? void 0 : context.queries) === null || _a === void 0 ? void 0 : _a.posts) {
        opts.fragments = Object.assign(Object.assign({}, context.queries.posts.fragments), opts.fragments);
        opts.variables = Object.assign(Object.assign({}, context.queries.posts.variables), opts.variables);
    }
    const result = client_1.useQuery(queries_1.getPostsQuery(opts), {
        variables: opts === null || opts === void 0 ? void 0 : opts.variables,
    });
    return (_b = result.data) === null || _b === void 0 ? void 0 : _b.posts;
}
exports.usePosts = usePosts;
function useGeneralSettings() {
    var _a;
    const result = client_1.useQuery(client_1.gql `
      ${queries_1.GENERAL_SETTINGS}
    `);
    return (_a = result.data) === null || _a === void 0 ? void 0 : _a.generalSettings;
}
exports.useGeneralSettings = useGeneralSettings;
function useUriInfo(uri) {
    var _a;
    const { urlPath, isPreview } = (_a = api_1.composeUrlPath(uri)) !== null && _a !== void 0 ? _a : {};
    const skip = !urlPath;
    const response = client_1.useQuery(queries_1.GET_URI_INFO, {
        variables: {
            uri: urlPath !== null && urlPath !== void 0 ? urlPath : '',
        },
        skip,
    });
    if (skip) {
        return;
    }
    return api_1.parseUriInfoQuery(response, urlPath !== null && urlPath !== void 0 ? urlPath : '', isPreview);
}
exports.useUriInfo = useUriInfo;
function usePost(uri, options = {}) {
    var _a, _b;
    const context = react_1.useContext(provider_1.HeadlessContext);
    const pageInfo = useUriInfo(uri);
    let skip = true;
    let opts = options;
    if (!opts) {
        opts = {};
    }
    if (!!pageInfo && !pageInfo.isPostsPage) {
        skip = false;
        if ((_a = context.queries) === null || _a === void 0 ? void 0 : _a.post) {
            opts.variables = Object.assign(Object.assign({}, context.queries.post.variables), opts.variables);
            opts.fragments = Object.assign(Object.assign({}, context.queries.post.fragments), opts.fragments);
        }
        opts.variables = Object.assign({ idType: (_b = pageInfo.idType) !== null && _b !== void 0 ? _b : 'URI', asPreview: pageInfo.isPreview, id: (pageInfo.idType === 'DATABASE_ID' || pageInfo.idType === 'ID') &&
                pageInfo.id
                ? pageInfo.id
                : pageInfo.uriPath }, opts.variables);
    }
    const result = client_1.useQuery(queries_1.getContentNodeQuery(opts), {
        variables: opts.variables,
        skip,
    });
    if (skip) {
        return;
    }
    return api_1.parseContentNodeQuery(result, opts);
}
exports.usePost = usePost;
