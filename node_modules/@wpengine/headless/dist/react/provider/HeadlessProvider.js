"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeadlessProvider = exports.HeadlessContext = void 0;
const react_1 = __importStar(require("react"));
const client_1 = require("@apollo/client");
const apolloClient_1 = require("./apolloClient");
exports.HeadlessContext = react_1.default.createContext({});
function parseContext(pageProps) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (!pageProps || !pageProps.queries) {
        return Object.assign({}, pageProps);
    }
    const ctx = {
        queries: {},
    };
    let pageData;
    let postData;
    let listPostData;
    if (typeof ((_b = (_a = pageProps.queries.post) === null || _a === void 0 ? void 0 : _a.fragments) === null || _b === void 0 ? void 0 : _b.pageData) === 'string') {
        pageData = client_1.gql `
      ${pageProps.queries.post.fragments.pageData}
    `;
    }
    if (typeof ((_d = (_c = pageProps.queries.post) === null || _c === void 0 ? void 0 : _c.fragments) === null || _d === void 0 ? void 0 : _d.postData) === 'string') {
        postData = client_1.gql `
      ${pageProps.queries.post.fragments.postData}
    `;
    }
    if (typeof ((_f = (_e = pageProps.queries.posts) === null || _e === void 0 ? void 0 : _e.fragments) === null || _f === void 0 ? void 0 : _f.listPostData) === 'string') {
        listPostData = client_1.gql `
      ${pageProps.queries.posts.fragments.listPostData}
    `;
    }
    if (pageData || postData) {
        ctx.queries.post = {
            fragments: {
                pageData,
                postData,
            },
            variables: (_g = pageProps.queries.post) === null || _g === void 0 ? void 0 : _g.variables,
        };
    }
    if (listPostData) {
        ctx.queries.posts = {
            fragments: {
                listPostData,
            },
            variables: (_h = pageProps.queries.posts) === null || _h === void 0 ? void 0 : _h.variables,
        };
    }
    return Object.assign(Object.assign({}, pageProps), { queries: ctx.queries });
}
function HeadlessProvider({ children, pageProps, }) {
    const apolloClient = apolloClient_1.useApollo(pageProps);
    const ctx = react_1.useMemo(() => parseContext(pageProps), [pageProps]);
    return (react_1.default.createElement(client_1.ApolloProvider, { client: apolloClient },
        react_1.default.createElement(exports.HeadlessContext.Provider, { value: ctx }, children)));
}
exports.HeadlessProvider = HeadlessProvider;
