"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimSlashes = exports.stringifyGql = exports.trimOriginFromUrl = exports.getCookiesFromContext = exports.trimLeadingSlash = exports.resolvePrefixedUrlPath = exports.stripPreviewFromUrlPath = exports.getUrlPath = exports.getQueryParam = exports.parseUrl = exports.trimTrailingSlash = exports.base64Encode = exports.base64Decode = void 0;
const graphql_1 = require("graphql");
const assert_1 = require("./assert");
function base64Decode(str) {
    if (!assert_1.isBase64(str)) {
        return str;
    }
    if (assert_1.isServerSide()) {
        return Buffer.from(str, 'base64').toString('utf8');
    }
    return atob(str);
}
exports.base64Decode = base64Decode;
function base64Encode(str) {
    if (assert_1.isServerSide()) {
        return Buffer.from(str, 'utf8').toString('base64');
    }
    return btoa(str);
}
exports.base64Encode = base64Encode;
function trimTrailingSlash(str) {
    if (!str) {
        return str;
    }
    return str.replace(/\/$/, '');
}
exports.trimTrailingSlash = trimTrailingSlash;
const URL_REGEX = /^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;
function parseUrl(url) {
    if (!url) {
        return;
    }
    const parsed = URL_REGEX.exec(url);
    if (!parsed || parsed.length < 1) {
        return;
    }
    return {
        href: parsed[0],
        protocol: parsed[1],
        baseUrl: `${parsed[1]}${parsed[3]}`,
        host: parsed[4],
        pathname: parsed[5],
        search: parsed[6],
        hash: parsed[8],
    };
}
exports.parseUrl = parseUrl;
function getQueryParam(url, param) {
    if (!url || url.length === 0) {
        return '';
    }
    const parsedUrl = parseUrl(url);
    if (!parsedUrl) {
        return '';
    }
    let query = parsedUrl.search;
    if (query[0] === '?') {
        query = query.substring(1);
    }
    const params = query.split('&');
    for (let i = 0; i < params.length; i += 1) {
        const pair = params[i].split('=');
        if (decodeURIComponent(pair[0]) === param) {
            return decodeURIComponent(pair[1]);
        }
    }
    return '';
}
exports.getQueryParam = getQueryParam;
function getUrlPath(url) {
    const parsedUrl = parseUrl(url);
    if (!parsedUrl) {
        return '/';
    }
    return `${(parsedUrl === null || parsedUrl === void 0 ? void 0 : parsedUrl.pathname) || '/'}${(parsedUrl === null || parsedUrl === void 0 ? void 0 : parsedUrl.search) || ''}`;
}
exports.getUrlPath = getUrlPath;
function stripPreviewFromUrlPath(urlPath) {
    if (!urlPath) {
        return urlPath;
    }
    return urlPath.replace(assert_1.previewRegex, '$1');
}
exports.stripPreviewFromUrlPath = stripPreviewFromUrlPath;
function resolvePrefixedUrlPath(url, prefix) {
    let resolvedUrl = url;
    if (prefix) {
        resolvedUrl = url.replace(prefix, '');
    }
    if (resolvedUrl === '') {
        resolvedUrl = '/';
    }
    return resolvedUrl;
}
exports.resolvePrefixedUrlPath = resolvePrefixedUrlPath;
function trimLeadingSlash(str) {
    if (!str) {
        return str;
    }
    if (str[0] === '/') {
        return str.slice(1);
    }
    return str;
}
exports.trimLeadingSlash = trimLeadingSlash;
function getCookiesFromContext(context) {
    var _a, _b, _c, _d;
    if (!context) {
        return;
    }
    if ((_a = context.previewData) === null || _a === void 0 ? void 0 : _a.serverInfo) {
        return context.previewData.serverInfo.cookie;
    }
    if ((_c = (_b = context.req) === null || _b === void 0 ? void 0 : _b.headers) === null || _c === void 0 ? void 0 : _c.cookie) {
        return context.req.headers.cookie;
    }
    if ((_d = context.headers) === null || _d === void 0 ? void 0 : _d.cookie) {
        return context.headers.cookie;
    }
    if (context.cookie) {
        return context.cookie;
    }
}
exports.getCookiesFromContext = getCookiesFromContext;
function trimOriginFromUrl(url) {
    try {
        const parsedUrl = new URL(url);
        return url.replace(parsedUrl.origin, '');
    }
    catch (e) {
        return url;
    }
}
exports.trimOriginFromUrl = trimOriginFromUrl;
function stringifyGql(doc) {
    if (!doc) {
        return;
    }
    return graphql_1.print(doc);
}
exports.stringifyGql = stringifyGql;
function trimSlashes(str) {
    if (!str) {
        return str;
    }
    return trimLeadingSlash(trimTrailingSlash(str));
}
exports.trimSlashes = trimSlashes;
